/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef FaceIdentify_H
#define FaceIdentify_H

#include <thrift/TDispatchProcessor.h>
#include "identify_types.h"



class FaceIdentifyIf {
 public:
  virtual ~FaceIdentifyIf() {}
  virtual void FI_add_face_database(const std::string& imagename) = 0;
  virtual int32_t FI_del_face_database(const std::string& uid) = 0;
  virtual int32_t FI_update_face_database(const std::string& imagename) = 0;
  virtual int32_t FI_find_user_info(const std::string& uid) = 0;
  virtual int32_t FI_find_group_users(const std::string& group_id) = 0;
  virtual void FI_face_database_identify(std::string& _return, const std::string& group_id, const std::string& imagename) = 0;
};

class FaceIdentifyIfFactory {
 public:
  typedef FaceIdentifyIf Handler;

  virtual ~FaceIdentifyIfFactory() {}

  virtual FaceIdentifyIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(FaceIdentifyIf* /* handler */) = 0;
};

class FaceIdentifyIfSingletonFactory : virtual public FaceIdentifyIfFactory {
 public:
  FaceIdentifyIfSingletonFactory(const boost::shared_ptr<FaceIdentifyIf>& iface) : iface_(iface) {}
  virtual ~FaceIdentifyIfSingletonFactory() {}

  virtual FaceIdentifyIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(FaceIdentifyIf* /* handler */) {}

 protected:
  boost::shared_ptr<FaceIdentifyIf> iface_;
};

class FaceIdentifyNull : virtual public FaceIdentifyIf {
 public:
  virtual ~FaceIdentifyNull() {}
  void FI_add_face_database(const std::string& /* imagename */) {
    return;
  }
  int32_t FI_del_face_database(const std::string& /* uid */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t FI_update_face_database(const std::string& /* imagename */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t FI_find_user_info(const std::string& /* uid */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t FI_find_group_users(const std::string& /* group_id */) {
    int32_t _return = 0;
    return _return;
  }
  void FI_face_database_identify(std::string& /* _return */, const std::string& /* group_id */, const std::string& /* imagename */) {
    return;
  }
};

typedef struct _FaceIdentify_FI_add_face_database_args__isset {
  _FaceIdentify_FI_add_face_database_args__isset() : imagename(false) {}
  bool imagename :1;
} _FaceIdentify_FI_add_face_database_args__isset;

class FaceIdentify_FI_add_face_database_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  FaceIdentify_FI_add_face_database_args(const FaceIdentify_FI_add_face_database_args&);
  FaceIdentify_FI_add_face_database_args& operator=(const FaceIdentify_FI_add_face_database_args&);
  FaceIdentify_FI_add_face_database_args() : imagename() {
  }

  virtual ~FaceIdentify_FI_add_face_database_args() throw();
  std::string imagename;

  _FaceIdentify_FI_add_face_database_args__isset __isset;

  void __set_imagename(const std::string& val);

  bool operator == (const FaceIdentify_FI_add_face_database_args & rhs) const
  {
    if (!(imagename == rhs.imagename))
      return false;
    return true;
  }
  bool operator != (const FaceIdentify_FI_add_face_database_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FaceIdentify_FI_add_face_database_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FaceIdentify_FI_add_face_database_args& obj);
};


class FaceIdentify_FI_add_face_database_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~FaceIdentify_FI_add_face_database_pargs() throw();
  const std::string* imagename;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FaceIdentify_FI_add_face_database_pargs& obj);
};


class FaceIdentify_FI_add_face_database_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  FaceIdentify_FI_add_face_database_result(const FaceIdentify_FI_add_face_database_result&);
  FaceIdentify_FI_add_face_database_result& operator=(const FaceIdentify_FI_add_face_database_result&);
  FaceIdentify_FI_add_face_database_result() {
  }

  virtual ~FaceIdentify_FI_add_face_database_result() throw();

  bool operator == (const FaceIdentify_FI_add_face_database_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const FaceIdentify_FI_add_face_database_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FaceIdentify_FI_add_face_database_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FaceIdentify_FI_add_face_database_result& obj);
};


class FaceIdentify_FI_add_face_database_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~FaceIdentify_FI_add_face_database_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const FaceIdentify_FI_add_face_database_presult& obj);
};

typedef struct _FaceIdentify_FI_del_face_database_args__isset {
  _FaceIdentify_FI_del_face_database_args__isset() : uid(false) {}
  bool uid :1;
} _FaceIdentify_FI_del_face_database_args__isset;

class FaceIdentify_FI_del_face_database_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  FaceIdentify_FI_del_face_database_args(const FaceIdentify_FI_del_face_database_args&);
  FaceIdentify_FI_del_face_database_args& operator=(const FaceIdentify_FI_del_face_database_args&);
  FaceIdentify_FI_del_face_database_args() : uid() {
  }

  virtual ~FaceIdentify_FI_del_face_database_args() throw();
  std::string uid;

  _FaceIdentify_FI_del_face_database_args__isset __isset;

  void __set_uid(const std::string& val);

  bool operator == (const FaceIdentify_FI_del_face_database_args & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    return true;
  }
  bool operator != (const FaceIdentify_FI_del_face_database_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FaceIdentify_FI_del_face_database_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FaceIdentify_FI_del_face_database_args& obj);
};


class FaceIdentify_FI_del_face_database_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~FaceIdentify_FI_del_face_database_pargs() throw();
  const std::string* uid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FaceIdentify_FI_del_face_database_pargs& obj);
};

typedef struct _FaceIdentify_FI_del_face_database_result__isset {
  _FaceIdentify_FI_del_face_database_result__isset() : success(false) {}
  bool success :1;
} _FaceIdentify_FI_del_face_database_result__isset;

class FaceIdentify_FI_del_face_database_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  FaceIdentify_FI_del_face_database_result(const FaceIdentify_FI_del_face_database_result&);
  FaceIdentify_FI_del_face_database_result& operator=(const FaceIdentify_FI_del_face_database_result&);
  FaceIdentify_FI_del_face_database_result() : success(0) {
  }

  virtual ~FaceIdentify_FI_del_face_database_result() throw();
  int32_t success;

  _FaceIdentify_FI_del_face_database_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const FaceIdentify_FI_del_face_database_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FaceIdentify_FI_del_face_database_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FaceIdentify_FI_del_face_database_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FaceIdentify_FI_del_face_database_result& obj);
};

typedef struct _FaceIdentify_FI_del_face_database_presult__isset {
  _FaceIdentify_FI_del_face_database_presult__isset() : success(false) {}
  bool success :1;
} _FaceIdentify_FI_del_face_database_presult__isset;

class FaceIdentify_FI_del_face_database_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~FaceIdentify_FI_del_face_database_presult() throw();
  int32_t* success;

  _FaceIdentify_FI_del_face_database_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const FaceIdentify_FI_del_face_database_presult& obj);
};

typedef struct _FaceIdentify_FI_update_face_database_args__isset {
  _FaceIdentify_FI_update_face_database_args__isset() : imagename(false) {}
  bool imagename :1;
} _FaceIdentify_FI_update_face_database_args__isset;

class FaceIdentify_FI_update_face_database_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  FaceIdentify_FI_update_face_database_args(const FaceIdentify_FI_update_face_database_args&);
  FaceIdentify_FI_update_face_database_args& operator=(const FaceIdentify_FI_update_face_database_args&);
  FaceIdentify_FI_update_face_database_args() : imagename() {
  }

  virtual ~FaceIdentify_FI_update_face_database_args() throw();
  std::string imagename;

  _FaceIdentify_FI_update_face_database_args__isset __isset;

  void __set_imagename(const std::string& val);

  bool operator == (const FaceIdentify_FI_update_face_database_args & rhs) const
  {
    if (!(imagename == rhs.imagename))
      return false;
    return true;
  }
  bool operator != (const FaceIdentify_FI_update_face_database_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FaceIdentify_FI_update_face_database_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FaceIdentify_FI_update_face_database_args& obj);
};


class FaceIdentify_FI_update_face_database_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~FaceIdentify_FI_update_face_database_pargs() throw();
  const std::string* imagename;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FaceIdentify_FI_update_face_database_pargs& obj);
};

typedef struct _FaceIdentify_FI_update_face_database_result__isset {
  _FaceIdentify_FI_update_face_database_result__isset() : success(false) {}
  bool success :1;
} _FaceIdentify_FI_update_face_database_result__isset;

class FaceIdentify_FI_update_face_database_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  FaceIdentify_FI_update_face_database_result(const FaceIdentify_FI_update_face_database_result&);
  FaceIdentify_FI_update_face_database_result& operator=(const FaceIdentify_FI_update_face_database_result&);
  FaceIdentify_FI_update_face_database_result() : success(0) {
  }

  virtual ~FaceIdentify_FI_update_face_database_result() throw();
  int32_t success;

  _FaceIdentify_FI_update_face_database_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const FaceIdentify_FI_update_face_database_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FaceIdentify_FI_update_face_database_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FaceIdentify_FI_update_face_database_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FaceIdentify_FI_update_face_database_result& obj);
};

typedef struct _FaceIdentify_FI_update_face_database_presult__isset {
  _FaceIdentify_FI_update_face_database_presult__isset() : success(false) {}
  bool success :1;
} _FaceIdentify_FI_update_face_database_presult__isset;

class FaceIdentify_FI_update_face_database_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~FaceIdentify_FI_update_face_database_presult() throw();
  int32_t* success;

  _FaceIdentify_FI_update_face_database_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const FaceIdentify_FI_update_face_database_presult& obj);
};

typedef struct _FaceIdentify_FI_find_user_info_args__isset {
  _FaceIdentify_FI_find_user_info_args__isset() : uid(false) {}
  bool uid :1;
} _FaceIdentify_FI_find_user_info_args__isset;

class FaceIdentify_FI_find_user_info_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  FaceIdentify_FI_find_user_info_args(const FaceIdentify_FI_find_user_info_args&);
  FaceIdentify_FI_find_user_info_args& operator=(const FaceIdentify_FI_find_user_info_args&);
  FaceIdentify_FI_find_user_info_args() : uid() {
  }

  virtual ~FaceIdentify_FI_find_user_info_args() throw();
  std::string uid;

  _FaceIdentify_FI_find_user_info_args__isset __isset;

  void __set_uid(const std::string& val);

  bool operator == (const FaceIdentify_FI_find_user_info_args & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    return true;
  }
  bool operator != (const FaceIdentify_FI_find_user_info_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FaceIdentify_FI_find_user_info_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FaceIdentify_FI_find_user_info_args& obj);
};


class FaceIdentify_FI_find_user_info_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~FaceIdentify_FI_find_user_info_pargs() throw();
  const std::string* uid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FaceIdentify_FI_find_user_info_pargs& obj);
};

typedef struct _FaceIdentify_FI_find_user_info_result__isset {
  _FaceIdentify_FI_find_user_info_result__isset() : success(false) {}
  bool success :1;
} _FaceIdentify_FI_find_user_info_result__isset;

class FaceIdentify_FI_find_user_info_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  FaceIdentify_FI_find_user_info_result(const FaceIdentify_FI_find_user_info_result&);
  FaceIdentify_FI_find_user_info_result& operator=(const FaceIdentify_FI_find_user_info_result&);
  FaceIdentify_FI_find_user_info_result() : success(0) {
  }

  virtual ~FaceIdentify_FI_find_user_info_result() throw();
  int32_t success;

  _FaceIdentify_FI_find_user_info_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const FaceIdentify_FI_find_user_info_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FaceIdentify_FI_find_user_info_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FaceIdentify_FI_find_user_info_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FaceIdentify_FI_find_user_info_result& obj);
};

typedef struct _FaceIdentify_FI_find_user_info_presult__isset {
  _FaceIdentify_FI_find_user_info_presult__isset() : success(false) {}
  bool success :1;
} _FaceIdentify_FI_find_user_info_presult__isset;

class FaceIdentify_FI_find_user_info_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~FaceIdentify_FI_find_user_info_presult() throw();
  int32_t* success;

  _FaceIdentify_FI_find_user_info_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const FaceIdentify_FI_find_user_info_presult& obj);
};

typedef struct _FaceIdentify_FI_find_group_users_args__isset {
  _FaceIdentify_FI_find_group_users_args__isset() : group_id(false) {}
  bool group_id :1;
} _FaceIdentify_FI_find_group_users_args__isset;

class FaceIdentify_FI_find_group_users_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  FaceIdentify_FI_find_group_users_args(const FaceIdentify_FI_find_group_users_args&);
  FaceIdentify_FI_find_group_users_args& operator=(const FaceIdentify_FI_find_group_users_args&);
  FaceIdentify_FI_find_group_users_args() : group_id() {
  }

  virtual ~FaceIdentify_FI_find_group_users_args() throw();
  std::string group_id;

  _FaceIdentify_FI_find_group_users_args__isset __isset;

  void __set_group_id(const std::string& val);

  bool operator == (const FaceIdentify_FI_find_group_users_args & rhs) const
  {
    if (!(group_id == rhs.group_id))
      return false;
    return true;
  }
  bool operator != (const FaceIdentify_FI_find_group_users_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FaceIdentify_FI_find_group_users_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FaceIdentify_FI_find_group_users_args& obj);
};


class FaceIdentify_FI_find_group_users_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~FaceIdentify_FI_find_group_users_pargs() throw();
  const std::string* group_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FaceIdentify_FI_find_group_users_pargs& obj);
};

typedef struct _FaceIdentify_FI_find_group_users_result__isset {
  _FaceIdentify_FI_find_group_users_result__isset() : success(false) {}
  bool success :1;
} _FaceIdentify_FI_find_group_users_result__isset;

class FaceIdentify_FI_find_group_users_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  FaceIdentify_FI_find_group_users_result(const FaceIdentify_FI_find_group_users_result&);
  FaceIdentify_FI_find_group_users_result& operator=(const FaceIdentify_FI_find_group_users_result&);
  FaceIdentify_FI_find_group_users_result() : success(0) {
  }

  virtual ~FaceIdentify_FI_find_group_users_result() throw();
  int32_t success;

  _FaceIdentify_FI_find_group_users_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const FaceIdentify_FI_find_group_users_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FaceIdentify_FI_find_group_users_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FaceIdentify_FI_find_group_users_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FaceIdentify_FI_find_group_users_result& obj);
};

typedef struct _FaceIdentify_FI_find_group_users_presult__isset {
  _FaceIdentify_FI_find_group_users_presult__isset() : success(false) {}
  bool success :1;
} _FaceIdentify_FI_find_group_users_presult__isset;

class FaceIdentify_FI_find_group_users_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~FaceIdentify_FI_find_group_users_presult() throw();
  int32_t* success;

  _FaceIdentify_FI_find_group_users_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const FaceIdentify_FI_find_group_users_presult& obj);
};

typedef struct _FaceIdentify_FI_face_database_identify_args__isset {
  _FaceIdentify_FI_face_database_identify_args__isset() : group_id(false), imagename(false) {}
  bool group_id :1;
  bool imagename :1;
} _FaceIdentify_FI_face_database_identify_args__isset;

class FaceIdentify_FI_face_database_identify_args {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  FaceIdentify_FI_face_database_identify_args(const FaceIdentify_FI_face_database_identify_args&);
  FaceIdentify_FI_face_database_identify_args& operator=(const FaceIdentify_FI_face_database_identify_args&);
  FaceIdentify_FI_face_database_identify_args() : group_id(), imagename() {
  }

  virtual ~FaceIdentify_FI_face_database_identify_args() throw();
  std::string group_id;
  std::string imagename;

  _FaceIdentify_FI_face_database_identify_args__isset __isset;

  void __set_group_id(const std::string& val);

  void __set_imagename(const std::string& val);

  bool operator == (const FaceIdentify_FI_face_database_identify_args & rhs) const
  {
    if (!(group_id == rhs.group_id))
      return false;
    if (!(imagename == rhs.imagename))
      return false;
    return true;
  }
  bool operator != (const FaceIdentify_FI_face_database_identify_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FaceIdentify_FI_face_database_identify_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FaceIdentify_FI_face_database_identify_args& obj);
};


class FaceIdentify_FI_face_database_identify_pargs {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};


  virtual ~FaceIdentify_FI_face_database_identify_pargs() throw();
  const std::string* group_id;
  const std::string* imagename;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FaceIdentify_FI_face_database_identify_pargs& obj);
};

typedef struct _FaceIdentify_FI_face_database_identify_result__isset {
  _FaceIdentify_FI_face_database_identify_result__isset() : success(false) {}
  bool success :1;
} _FaceIdentify_FI_face_database_identify_result__isset;

class FaceIdentify_FI_face_database_identify_result {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};

  FaceIdentify_FI_face_database_identify_result(const FaceIdentify_FI_face_database_identify_result&);
  FaceIdentify_FI_face_database_identify_result& operator=(const FaceIdentify_FI_face_database_identify_result&);
  FaceIdentify_FI_face_database_identify_result() : success() {
  }

  virtual ~FaceIdentify_FI_face_database_identify_result() throw();
  std::string success;

  _FaceIdentify_FI_face_database_identify_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const FaceIdentify_FI_face_database_identify_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FaceIdentify_FI_face_database_identify_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FaceIdentify_FI_face_database_identify_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FaceIdentify_FI_face_database_identify_result& obj);
};

typedef struct _FaceIdentify_FI_face_database_identify_presult__isset {
  _FaceIdentify_FI_face_database_identify_presult__isset() : success(false) {}
  bool success :1;
} _FaceIdentify_FI_face_database_identify_presult__isset;

class FaceIdentify_FI_face_database_identify_presult {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};


  virtual ~FaceIdentify_FI_face_database_identify_presult() throw();
  std::string* success;

  _FaceIdentify_FI_face_database_identify_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const FaceIdentify_FI_face_database_identify_presult& obj);
};

class FaceIdentifyClient : virtual public FaceIdentifyIf {
 public:
  FaceIdentifyClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  FaceIdentifyClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void FI_add_face_database(const std::string& imagename);
  void send_FI_add_face_database(const std::string& imagename);
  void recv_FI_add_face_database();
  int32_t FI_del_face_database(const std::string& uid);
  void send_FI_del_face_database(const std::string& uid);
  int32_t recv_FI_del_face_database();
  int32_t FI_update_face_database(const std::string& imagename);
  void send_FI_update_face_database(const std::string& imagename);
  int32_t recv_FI_update_face_database();
  int32_t FI_find_user_info(const std::string& uid);
  void send_FI_find_user_info(const std::string& uid);
  int32_t recv_FI_find_user_info();
  int32_t FI_find_group_users(const std::string& group_id);
  void send_FI_find_group_users(const std::string& group_id);
  int32_t recv_FI_find_group_users();
  void FI_face_database_identify(std::string& _return, const std::string& group_id, const std::string& imagename);
  void send_FI_face_database_identify(const std::string& group_id, const std::string& imagename);
  void recv_FI_face_database_identify(std::string& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class FaceIdentifyProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<FaceIdentifyIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (FaceIdentifyProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_FI_add_face_database(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_FI_del_face_database(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_FI_update_face_database(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_FI_find_user_info(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_FI_find_group_users(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_FI_face_database_identify(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  FaceIdentifyProcessor(boost::shared_ptr<FaceIdentifyIf> iface) :
    iface_(iface) {
    processMap_["FI_add_face_database"] = &FaceIdentifyProcessor::process_FI_add_face_database;
    processMap_["FI_del_face_database"] = &FaceIdentifyProcessor::process_FI_del_face_database;
    processMap_["FI_update_face_database"] = &FaceIdentifyProcessor::process_FI_update_face_database;
    processMap_["FI_find_user_info"] = &FaceIdentifyProcessor::process_FI_find_user_info;
    processMap_["FI_find_group_users"] = &FaceIdentifyProcessor::process_FI_find_group_users;
    processMap_["FI_face_database_identify"] = &FaceIdentifyProcessor::process_FI_face_database_identify;
  }

  virtual ~FaceIdentifyProcessor() {}
};

class FaceIdentifyProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  FaceIdentifyProcessorFactory(const ::boost::shared_ptr< FaceIdentifyIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< FaceIdentifyIfFactory > handlerFactory_;
};

class FaceIdentifyMultiface : virtual public FaceIdentifyIf {
 public:
  FaceIdentifyMultiface(std::vector<boost::shared_ptr<FaceIdentifyIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~FaceIdentifyMultiface() {}
 protected:
  std::vector<boost::shared_ptr<FaceIdentifyIf> > ifaces_;
  FaceIdentifyMultiface() {}
  void add(boost::shared_ptr<FaceIdentifyIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void FI_add_face_database(const std::string& imagename) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->FI_add_face_database(imagename);
    }
    ifaces_[i]->FI_add_face_database(imagename);
  }

  int32_t FI_del_face_database(const std::string& uid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->FI_del_face_database(uid);
    }
    return ifaces_[i]->FI_del_face_database(uid);
  }

  int32_t FI_update_face_database(const std::string& imagename) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->FI_update_face_database(imagename);
    }
    return ifaces_[i]->FI_update_face_database(imagename);
  }

  int32_t FI_find_user_info(const std::string& uid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->FI_find_user_info(uid);
    }
    return ifaces_[i]->FI_find_user_info(uid);
  }

  int32_t FI_find_group_users(const std::string& group_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->FI_find_group_users(group_id);
    }
    return ifaces_[i]->FI_find_group_users(group_id);
  }

  void FI_face_database_identify(std::string& _return, const std::string& group_id, const std::string& imagename) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->FI_face_database_identify(_return, group_id, imagename);
    }
    ifaces_[i]->FI_face_database_identify(_return, group_id, imagename);
    return;
  }

};



#endif
